# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import face_recognition_pb2 as face__recognition__pb2


class FaceRecognitionStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetFaceCount = channel.unary_unary(
        '/face_recognition.FaceRecognition/GetFaceCount',
        request_serializer=face__recognition__pb2.GetFaceCountRequest.SerializeToString,
        response_deserializer=face__recognition__pb2.GetFaceCountReply.FromString,
        )
    self.IsMatchFace = channel.unary_unary(
        '/face_recognition.FaceRecognition/IsMatchFace',
        request_serializer=face__recognition__pb2.IsMatchFaceRequest.SerializeToString,
        response_deserializer=face__recognition__pb2.IsMatchFaceReply.FromString,
        )


class FaceRecognitionServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetFaceCount(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def IsMatchFace(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_FaceRecognitionServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetFaceCount': grpc.unary_unary_rpc_method_handler(
          servicer.GetFaceCount,
          request_deserializer=face__recognition__pb2.GetFaceCountRequest.FromString,
          response_serializer=face__recognition__pb2.GetFaceCountReply.SerializeToString,
      ),
      'IsMatchFace': grpc.unary_unary_rpc_method_handler(
          servicer.IsMatchFace,
          request_deserializer=face__recognition__pb2.IsMatchFaceRequest.FromString,
          response_serializer=face__recognition__pb2.IsMatchFaceReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'face_recognition.FaceRecognition', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
