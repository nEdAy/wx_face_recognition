# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: face_recognition.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database

# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='face_recognition.proto',
  package='face_recognition',
  syntax='proto3',
  serialized_pb=_b('\n\x16\x66\x61\x63\x65_recognition.proto\x12\x10\x66\x61\x63\x65_recognition\"P\n\x13GetFaceCountRequest\x12\x14\n\x0cprefixCosUrl\x18\x01 \x01(\t\x12\x10\n\x08\x66ileName\x18\x02 \x01(\t\x12\x11\n\tfaceToken\x18\x03 \x01(\t\"\"\n\x11GetFaceCountReply\x12\r\n\x05\x63ount\x18\x01 \x01(\x05\"O\n\x12IsMatchFaceRequest\x12\x14\n\x0cprefixCosUrl\x18\x01 \x01(\t\x12\x10\n\x08\x66ileName\x18\x02 \x01(\t\x12\x11\n\tfaceToken\x18\x03 \x01(\t\"\'\n\x10IsMatchFaceReply\x12\x13\n\x0bisMatchFace\x18\x01 \x01(\x08\x32\xca\x01\n\x0f\x46\x61\x63\x65Recognition\x12\\\n\x0cGetFaceCount\x12%.face_recognition.GetFaceCountRequest\x1a#.face_recognition.GetFaceCountReply\"\x00\x12Y\n\x0bIsMatchFace\x12$.face_recognition.IsMatchFaceRequest\x1a\".face_recognition.IsMatchFaceReply\"\x00\x62\x06proto3')
)




_GETFACECOUNTREQUEST = _descriptor.Descriptor(
  name='GetFaceCountRequest',
  full_name='face_recognition.GetFaceCountRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='prefixCosUrl', full_name='face_recognition.GetFaceCountRequest.prefixCosUrl', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='fileName', full_name='face_recognition.GetFaceCountRequest.fileName', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='faceToken', full_name='face_recognition.GetFaceCountRequest.faceToken', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=44,
  serialized_end=124,
)


_GETFACECOUNTREPLY = _descriptor.Descriptor(
  name='GetFaceCountReply',
  full_name='face_recognition.GetFaceCountReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='count', full_name='face_recognition.GetFaceCountReply.count', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=126,
  serialized_end=160,
)


_ISMATCHFACEREQUEST = _descriptor.Descriptor(
  name='IsMatchFaceRequest',
  full_name='face_recognition.IsMatchFaceRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='prefixCosUrl', full_name='face_recognition.IsMatchFaceRequest.prefixCosUrl', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='fileName', full_name='face_recognition.IsMatchFaceRequest.fileName', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='faceToken', full_name='face_recognition.IsMatchFaceRequest.faceToken', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=162,
  serialized_end=241,
)


_ISMATCHFACEREPLY = _descriptor.Descriptor(
  name='IsMatchFaceReply',
  full_name='face_recognition.IsMatchFaceReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='isMatchFace', full_name='face_recognition.IsMatchFaceReply.isMatchFace', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=243,
  serialized_end=282,
)

DESCRIPTOR.message_types_by_name['GetFaceCountRequest'] = _GETFACECOUNTREQUEST
DESCRIPTOR.message_types_by_name['GetFaceCountReply'] = _GETFACECOUNTREPLY
DESCRIPTOR.message_types_by_name['IsMatchFaceRequest'] = _ISMATCHFACEREQUEST
DESCRIPTOR.message_types_by_name['IsMatchFaceReply'] = _ISMATCHFACEREPLY
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

GetFaceCountRequest = _reflection.GeneratedProtocolMessageType('GetFaceCountRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETFACECOUNTREQUEST,
  __module__ = 'face_recognition_pb2'
  # @@protoc_insertion_point(class_scope:face_recognition.GetFaceCountRequest)
  ))
_sym_db.RegisterMessage(GetFaceCountRequest)

GetFaceCountReply = _reflection.GeneratedProtocolMessageType('GetFaceCountReply', (_message.Message,), dict(
  DESCRIPTOR = _GETFACECOUNTREPLY,
  __module__ = 'face_recognition_pb2'
  # @@protoc_insertion_point(class_scope:face_recognition.GetFaceCountReply)
  ))
_sym_db.RegisterMessage(GetFaceCountReply)

IsMatchFaceRequest = _reflection.GeneratedProtocolMessageType('IsMatchFaceRequest', (_message.Message,), dict(
  DESCRIPTOR = _ISMATCHFACEREQUEST,
  __module__ = 'face_recognition_pb2'
  # @@protoc_insertion_point(class_scope:face_recognition.IsMatchFaceRequest)
  ))
_sym_db.RegisterMessage(IsMatchFaceRequest)

IsMatchFaceReply = _reflection.GeneratedProtocolMessageType('IsMatchFaceReply', (_message.Message,), dict(
  DESCRIPTOR = _ISMATCHFACEREPLY,
  __module__ = 'face_recognition_pb2'
  # @@protoc_insertion_point(class_scope:face_recognition.IsMatchFaceReply)
  ))
_sym_db.RegisterMessage(IsMatchFaceReply)



_FACERECOGNITION = _descriptor.ServiceDescriptor(
  name='FaceRecognition',
  full_name='face_recognition.FaceRecognition',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=285,
  serialized_end=487,
  methods=[
  _descriptor.MethodDescriptor(
    name='GetFaceCount',
    full_name='face_recognition.FaceRecognition.GetFaceCount',
    index=0,
    containing_service=None,
    input_type=_GETFACECOUNTREQUEST,
    output_type=_GETFACECOUNTREPLY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='IsMatchFace',
    full_name='face_recognition.FaceRecognition.IsMatchFace',
    index=1,
    containing_service=None,
    input_type=_ISMATCHFACEREQUEST,
    output_type=_ISMATCHFACEREPLY,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_FACERECOGNITION)

DESCRIPTOR.services_by_name['FaceRecognition'] = _FACERECOGNITION

# @@protoc_insertion_point(module_scope)
